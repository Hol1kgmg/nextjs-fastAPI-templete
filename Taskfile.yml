version: '3'

# 統合タスク（フルスタック - 両方実行）
tasks:
  list:
    desc: "task command lists"
    cmds:
      - task --list
  install:
    desc: "[Fullstack] Install all dependencies"
    cmds:
      - task install:backend
      - task install:frontend

  dev:
    desc: "[Fullstack] Start both frontend and backend development servers"
    deps: [dev:backend, dev:frontend]

  build:
    desc: "[Fullstack] Build both frontend and backend"
    cmds:
      - task build:backend
      - task build:frontend

  test:
    desc: "[Fullstack] Run all tests"
    cmds:
      - task test:backend
      - task test:frontend

  check:all:
    desc: "[Fullstack] Run all quality checks"
    cmds:
      - task check:backend
      - task check:frontend

  clean:
    desc: "[Fullstack] Clean all generated files"
    cmds:
      - task clean:backend
      - task clean:frontend

  # Docker統合タスク（全環境）
  docker:build:
    desc: "[Docker] Build all Docker images"
    cmds:
      - task docker:build:backend
      - task docker:build:frontend

  docker:up:
    desc: "[Docker] Start all Docker environments"
    cmds:
      - task docker:up:backend
      - task docker:up:frontend

  docker:down:
    desc: "[Docker] Stop all Docker environments"
    cmds:
      - task docker:down:backend
      - task docker:down:frontend

  # Docker個別サービスタスク
  docker:up:db:
    desc: "[Docker] Start database container (auto-detect DEBUG mode)"
    cmds:
      - task -d backend docker:db:detached

  # バックエンド個別タスク
  install:backend:
    desc: "[Backend] Install dependencies using uv"
    dir: backend
    cmds:
      - uv sync --group dev

  dev:backend:
    desc: "[Backend] Start development server"
    dir: backend
    cmds:
      - uv run uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  build:backend:
    desc: "[Backend] Build backend (placeholder)"
    dir: backend
    cmds:
      - echo "Backend build completed"

  test:backend:
    desc: "[Backend] Run tests with pytest"
    dir: backend
    cmds:
      - uv run pytest

  check:backend:
    desc: "[Backend] Run all code quality checks"
    dir: backend
    cmds:
      - uv run ruff check .
      - uv run ruff format . --check
      - uv run mypy src

  clean:backend:
    desc: "[Backend] Clean generated files"
    dir: backend
    cmds:
      - rm -rf .pytest_cache .mypy_cache .ruff_cache __pycache__
      - find . -name "*.pyc" -delete

  # バックエンドDocker個別タスク
  docker:build:backend:
    desc: "[Backend] Build backend Docker image"
    cmds:
      - task -d backend docker:build

  docker:up:backend:
    desc: "[Backend] Start backend Docker environment"
    cmds:
      - task -d backend docker:up

  docker:down:backend:
    desc: "[Backend] Stop backend Docker environment (includes database)"
    cmds:
      - task -d backend docker:down

  # フロントエンド個別タスク
  install:frontend:
    desc: "[Frontend] Install dependencies using Bun"
    dir: frontend
    cmds:
      - bun install

  dev:frontend:
    desc: "[Frontend] Start development server"
    dir: frontend
    cmds:
      - bun run dev

  build:frontend:
    desc: "[Frontend] Build production application"
    dir: frontend
    cmds:
      - bun run build

  test:frontend:
    desc: "[Frontend] Run tests"
    dir: frontend
    cmds:
      - bun run test

  check:frontend:
    desc: "[Frontend] Run all quality checks"
    dir: frontend
    cmds:
      - bun run check
      - bun run format
      - bun run typecheck

  clean:frontend:
    desc: "[Frontend] Clean generated files"
    dir: frontend
    cmds:
      - rm -rf .next node_modules/.cache dist storybook-static

  # フロントエンドDocker個別タスク
  docker:build:frontend:
    desc: "[Frontend] Build frontend Docker image"
    dir: frontend
    cmds:
      - docker-compose -f docker/docker-compose.yml build

  docker:up:frontend:
    desc: "[Frontend] Start frontend Docker environment"
    dir: frontend
    cmds:
      - docker-compose -f docker/docker-compose.yml up

  docker:down:frontend:
    desc: "[Frontend] Stop frontend Docker environment"
    dir: frontend
    cmds:
      - docker-compose -f docker/docker-compose.yml down

  # 追加のDocker便利タスク
  docker:logs:db:
    desc: "[Docker] Show database container logs"
    cmds:
      - task -d backend docker:logs:db

  docker:restart:db:
    desc: "[Docker] Restart database container"
    cmds:
      - task -d backend docker:restart:db

  # バックエンドマイグレーション関連（個別タスクとして維持）
  migrate:
    desc: "[Backend] Run auto migration (generate + upgrade)"
    dir: backend
    cmds:
      - uv run python -m src.script.auto_migrate

  migrate:generate:
    desc: "[Backend] Generate migration only (no upgrade)"
    dir: backend
    cmds:
      - uv run python -m src.script.auto_migrate --no-upgrade

  migrate:status:
    desc: "[Backend] Show migration status"
    dir: backend
    cmds:
      - uv run python -m src.script.auto_migrate --status

  migrate:upgrade:
    desc: "[Backend] Upgrade database to latest migration"
    dir: backend
    cmds:
      - uv run alembic upgrade head

  migrate:downgrade:
    desc: "[Backend] Safely rollback database by one migration"
    dir: backend
    cmds:
      - uv run python -m src.script.migration_safety --downgrade

  migrate:check:
    desc: "[Backend] Check migration files integrity"
    dir: backend
    cmds:
      - uv run python -m src.script.migration_safety --check-only

  migrate:reset:
    desc: "[Backend] Reset database to base (remove all migrations)"
    dir: backend
    cmds:
      - echo "⚠️  データベースを初期状態にリセットします"
      - uv run alembic downgrade base
      - echo "✅ データベースリセット完了"

  migrate:history:
    desc: "[Backend] Show migration history"
    dir: backend
    cmds:
      - uv run alembic history